/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../../../common";

export type MetadataStruct = { protocol: BigNumberish; pointer: string };

export type MetadataStructOutput = [protocol: bigint, pointer: string] & {
  protocol: bigint;
  pointer: string;
};

export declare namespace IStrategy {
  export type PayoutSummaryStruct = {
    recipientAddress: AddressLike;
    amount: BigNumberish;
  };

  export type PayoutSummaryStructOutput = [
    recipientAddress: string,
    amount: bigint
  ] & { recipientAddress: string; amount: bigint };
}

export declare namespace QVBaseStrategy {
  export type RecipientStruct = {
    totalVotesReceived: BigNumberish;
    useRegistryAnchor: boolean;
    recipientAddress: AddressLike;
    metadata: MetadataStruct;
    recipientStatus: BigNumberish;
    applicationId: BigNumberish;
    amountDistributed: BigNumberish;
  };

  export type RecipientStructOutput = [
    totalVotesReceived: bigint,
    useRegistryAnchor: boolean,
    recipientAddress: string,
    metadata: MetadataStructOutput,
    recipientStatus: bigint,
    applicationId: bigint,
    amountDistributed: bigint
  ] & {
    totalVotesReceived: bigint;
    useRegistryAnchor: boolean;
    recipientAddress: string;
    metadata: MetadataStructOutput;
    recipientStatus: bigint;
    applicationId: bigint;
    amountDistributed: bigint;
  };
}

export interface QVSimpleStrategyInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "NATIVE"
      | "addAllocator"
      | "allocate"
      | "allocationEndTime"
      | "allocationStartTime"
      | "allocators"
      | "allowedAllocators"
      | "calculateAdditionalEffectiveVotes"
      | "distribute"
      | "distributionStarted"
      | "getAllo"
      | "getPayouts"
      | "getPoolAmount"
      | "getPoolId"
      | "getRecipient"
      | "getRecipientStatus"
      | "getStrategyId"
      | "increasePoolAmount"
      | "initialize"
      | "isPoolActive"
      | "isValidAllocator"
      | "maxVoiceCreditsPerAllocator"
      | "metadataRequired"
      | "multicall"
      | "paidOut"
      | "recipients"
      | "registerRecipient"
      | "registrationEndTime"
      | "registrationStartTime"
      | "registryGating"
      | "removeAllocator"
      | "reviewRecipients"
      | "reviewThreshold"
      | "reviewedByManager"
      | "reviewsByStatus"
      | "totalRecipientVotes"
      | "updatePoolTimestamps"
      | "withdraw"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "Allocated"
      | "AllocatorAdded"
      | "AllocatorRemoved"
      | "Distributed"
      | "Initialized"
      | "PoolActive"
      | "RecipientStatusUpdated"
      | "Registered"
      | "Reviewed"
      | "TimestampsUpdated"
      | "UpdatedRegistration"
  ): EventFragment;

  encodeFunctionData(functionFragment: "NATIVE", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "addAllocator",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "allocate",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "allocationEndTime",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "allocationStartTime",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "allocators",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "allowedAllocators",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "calculateAdditionalEffectiveVotes",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "distribute",
    values: [AddressLike[], BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "distributionStarted",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getAllo", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getPayouts",
    values: [AddressLike[], BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getPoolAmount",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getPoolId", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getRecipient",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getRecipientStatus",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getStrategyId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "increasePoolAmount",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isPoolActive",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isValidAllocator",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "maxVoiceCreditsPerAllocator",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "metadataRequired",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "multicall",
    values: [BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "paidOut",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "recipients",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "registerRecipient",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "registrationEndTime",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "registrationStartTime",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "registryGating",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "removeAllocator",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "reviewRecipients",
    values: [AddressLike[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "reviewThreshold",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "reviewedByManager",
    values: [AddressLike, BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "reviewsByStatus",
    values: [AddressLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "totalRecipientVotes",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "updatePoolTimestamps",
    values: [BigNumberish, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(functionFragment: "NATIVE", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "addAllocator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "allocate", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "allocationEndTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "allocationStartTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "allocators", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "allowedAllocators",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateAdditionalEffectiveVotes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "distribute", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "distributionStarted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getAllo", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getPayouts", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getPoolAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getPoolId", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getRecipient",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRecipientStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getStrategyId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "increasePoolAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isPoolActive",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isValidAllocator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxVoiceCreditsPerAllocator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "metadataRequired",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "multicall", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paidOut", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "recipients", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "registerRecipient",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registrationEndTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registrationStartTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registryGating",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeAllocator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "reviewRecipients",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "reviewThreshold",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "reviewedByManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "reviewsByStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalRecipientVotes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updatePoolTimestamps",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
}

export namespace AllocatedEvent {
  export type InputTuple = [
    recipientId: AddressLike,
    votes: BigNumberish,
    allocator: AddressLike
  ];
  export type OutputTuple = [
    recipientId: string,
    votes: bigint,
    allocator: string
  ];
  export interface OutputObject {
    recipientId: string;
    votes: bigint;
    allocator: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace AllocatorAddedEvent {
  export type InputTuple = [allocator: AddressLike, sender: AddressLike];
  export type OutputTuple = [allocator: string, sender: string];
  export interface OutputObject {
    allocator: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace AllocatorRemovedEvent {
  export type InputTuple = [allocator: AddressLike, sender: AddressLike];
  export type OutputTuple = [allocator: string, sender: string];
  export interface OutputObject {
    allocator: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DistributedEvent {
  export type InputTuple = [
    recipientId: AddressLike,
    recipientAddress: AddressLike,
    amount: BigNumberish,
    sender: AddressLike
  ];
  export type OutputTuple = [
    recipientId: string,
    recipientAddress: string,
    amount: bigint,
    sender: string
  ];
  export interface OutputObject {
    recipientId: string;
    recipientAddress: string;
    amount: bigint;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace InitializedEvent {
  export type InputTuple = [poolId: BigNumberish, data: BytesLike];
  export type OutputTuple = [poolId: bigint, data: string];
  export interface OutputObject {
    poolId: bigint;
    data: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PoolActiveEvent {
  export type InputTuple = [active: boolean];
  export type OutputTuple = [active: boolean];
  export interface OutputObject {
    active: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RecipientStatusUpdatedEvent {
  export type InputTuple = [
    recipientId: AddressLike,
    applicationId: BigNumberish,
    status: BigNumberish,
    sender: AddressLike
  ];
  export type OutputTuple = [
    recipientId: string,
    applicationId: bigint,
    status: bigint,
    sender: string
  ];
  export interface OutputObject {
    recipientId: string;
    applicationId: bigint;
    status: bigint;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RegisteredEvent {
  export type InputTuple = [
    recipientId: AddressLike,
    data: BytesLike,
    sender: AddressLike
  ];
  export type OutputTuple = [recipientId: string, data: string, sender: string];
  export interface OutputObject {
    recipientId: string;
    data: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ReviewedEvent {
  export type InputTuple = [
    recipientId: AddressLike,
    applicationId: BigNumberish,
    status: BigNumberish,
    sender: AddressLike
  ];
  export type OutputTuple = [
    recipientId: string,
    applicationId: bigint,
    status: bigint,
    sender: string
  ];
  export interface OutputObject {
    recipientId: string;
    applicationId: bigint;
    status: bigint;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TimestampsUpdatedEvent {
  export type InputTuple = [
    registrationStartTime: BigNumberish,
    registrationEndTime: BigNumberish,
    allocationStartTime: BigNumberish,
    allocationEndTime: BigNumberish,
    sender: AddressLike
  ];
  export type OutputTuple = [
    registrationStartTime: bigint,
    registrationEndTime: bigint,
    allocationStartTime: bigint,
    allocationEndTime: bigint,
    sender: string
  ];
  export interface OutputObject {
    registrationStartTime: bigint;
    registrationEndTime: bigint;
    allocationStartTime: bigint;
    allocationEndTime: bigint;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UpdatedRegistrationEvent {
  export type InputTuple = [
    recipientId: AddressLike,
    applicationId: BigNumberish,
    data: BytesLike,
    sender: AddressLike,
    status: BigNumberish
  ];
  export type OutputTuple = [
    recipientId: string,
    applicationId: bigint,
    data: string,
    sender: string,
    status: bigint
  ];
  export interface OutputObject {
    recipientId: string;
    applicationId: bigint;
    data: string;
    sender: string;
    status: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface QVSimpleStrategy extends BaseContract {
  connect(runner?: ContractRunner | null): QVSimpleStrategy;
  waitForDeployment(): Promise<this>;

  interface: QVSimpleStrategyInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  NATIVE: TypedContractMethod<[], [string], "view">;

  addAllocator: TypedContractMethod<
    [_allocator: AddressLike],
    [void],
    "nonpayable"
  >;

  allocate: TypedContractMethod<
    [_data: BytesLike, _sender: AddressLike],
    [void],
    "payable"
  >;

  allocationEndTime: TypedContractMethod<[], [bigint], "view">;

  allocationStartTime: TypedContractMethod<[], [bigint], "view">;

  allocators: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  allowedAllocators: TypedContractMethod<
    [arg0: AddressLike],
    [boolean],
    "view"
  >;

  calculateAdditionalEffectiveVotes: TypedContractMethod<
    [
      _allocatorAddress: AddressLike,
      _recipientId: AddressLike,
      _additionalVoiceCredits: BigNumberish
    ],
    [bigint],
    "view"
  >;

  distribute: TypedContractMethod<
    [_recipientIds: AddressLike[], _data: BytesLike, _sender: AddressLike],
    [void],
    "nonpayable"
  >;

  distributionStarted: TypedContractMethod<[], [boolean], "view">;

  getAllo: TypedContractMethod<[], [string], "view">;

  getPayouts: TypedContractMethod<
    [_recipientIds: AddressLike[], _data: BytesLike[]],
    [IStrategy.PayoutSummaryStructOutput[]],
    "view"
  >;

  getPoolAmount: TypedContractMethod<[], [bigint], "view">;

  getPoolId: TypedContractMethod<[], [bigint], "view">;

  getRecipient: TypedContractMethod<
    [_recipientId: AddressLike],
    [QVBaseStrategy.RecipientStructOutput],
    "view"
  >;

  getRecipientStatus: TypedContractMethod<
    [_recipientId: AddressLike],
    [bigint],
    "view"
  >;

  getStrategyId: TypedContractMethod<[], [string], "view">;

  increasePoolAmount: TypedContractMethod<
    [_amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  initialize: TypedContractMethod<
    [_poolId: BigNumberish, _data: BytesLike],
    [void],
    "nonpayable"
  >;

  isPoolActive: TypedContractMethod<[], [boolean], "view">;

  isValidAllocator: TypedContractMethod<
    [_allocator: AddressLike],
    [boolean],
    "view"
  >;

  maxVoiceCreditsPerAllocator: TypedContractMethod<[], [bigint], "view">;

  metadataRequired: TypedContractMethod<[], [boolean], "view">;

  multicall: TypedContractMethod<[data: BytesLike[]], [string[]], "nonpayable">;

  paidOut: TypedContractMethod<[arg0: AddressLike], [boolean], "view">;

  recipients: TypedContractMethod<
    [arg0: AddressLike],
    [
      [
        bigint,
        boolean,
        string,
        MetadataStructOutput,
        bigint,
        bigint,
        bigint
      ] & {
        totalVotesReceived: bigint;
        useRegistryAnchor: boolean;
        recipientAddress: string;
        metadata: MetadataStructOutput;
        recipientStatus: bigint;
        applicationId: bigint;
        amountDistributed: bigint;
      }
    ],
    "view"
  >;

  registerRecipient: TypedContractMethod<
    [_data: BytesLike, _sender: AddressLike],
    [string],
    "payable"
  >;

  registrationEndTime: TypedContractMethod<[], [bigint], "view">;

  registrationStartTime: TypedContractMethod<[], [bigint], "view">;

  registryGating: TypedContractMethod<[], [boolean], "view">;

  removeAllocator: TypedContractMethod<
    [_allocator: AddressLike],
    [void],
    "nonpayable"
  >;

  reviewRecipients: TypedContractMethod<
    [_recipientIds: AddressLike[], _recipientStatuses: BigNumberish[]],
    [void],
    "nonpayable"
  >;

  reviewThreshold: TypedContractMethod<[], [bigint], "view">;

  reviewedByManager: TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish, arg2: AddressLike],
    [bigint],
    "view"
  >;

  reviewsByStatus: TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish, arg2: BigNumberish],
    [bigint],
    "view"
  >;

  totalRecipientVotes: TypedContractMethod<[], [bigint], "view">;

  updatePoolTimestamps: TypedContractMethod<
    [
      _registrationStartTime: BigNumberish,
      _registrationEndTime: BigNumberish,
      _allocationStartTime: BigNumberish,
      _allocationEndTime: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  withdraw: TypedContractMethod<[_token: AddressLike], [void], "nonpayable">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "NATIVE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "addAllocator"
  ): TypedContractMethod<[_allocator: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "allocate"
  ): TypedContractMethod<
    [_data: BytesLike, _sender: AddressLike],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "allocationEndTime"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "allocationStartTime"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "allocators"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "allowedAllocators"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "calculateAdditionalEffectiveVotes"
  ): TypedContractMethod<
    [
      _allocatorAddress: AddressLike,
      _recipientId: AddressLike,
      _additionalVoiceCredits: BigNumberish
    ],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "distribute"
  ): TypedContractMethod<
    [_recipientIds: AddressLike[], _data: BytesLike, _sender: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "distributionStarted"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "getAllo"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getPayouts"
  ): TypedContractMethod<
    [_recipientIds: AddressLike[], _data: BytesLike[]],
    [IStrategy.PayoutSummaryStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getPoolAmount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getPoolId"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getRecipient"
  ): TypedContractMethod<
    [_recipientId: AddressLike],
    [QVBaseStrategy.RecipientStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getRecipientStatus"
  ): TypedContractMethod<[_recipientId: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getStrategyId"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "increasePoolAmount"
  ): TypedContractMethod<[_amount: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "initialize"
  ): TypedContractMethod<
    [_poolId: BigNumberish, _data: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "isPoolActive"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "isValidAllocator"
  ): TypedContractMethod<[_allocator: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "maxVoiceCreditsPerAllocator"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "metadataRequired"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "multicall"
  ): TypedContractMethod<[data: BytesLike[]], [string[]], "nonpayable">;
  getFunction(
    nameOrSignature: "paidOut"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "recipients"
  ): TypedContractMethod<
    [arg0: AddressLike],
    [
      [
        bigint,
        boolean,
        string,
        MetadataStructOutput,
        bigint,
        bigint,
        bigint
      ] & {
        totalVotesReceived: bigint;
        useRegistryAnchor: boolean;
        recipientAddress: string;
        metadata: MetadataStructOutput;
        recipientStatus: bigint;
        applicationId: bigint;
        amountDistributed: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "registerRecipient"
  ): TypedContractMethod<
    [_data: BytesLike, _sender: AddressLike],
    [string],
    "payable"
  >;
  getFunction(
    nameOrSignature: "registrationEndTime"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "registrationStartTime"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "registryGating"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "removeAllocator"
  ): TypedContractMethod<[_allocator: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "reviewRecipients"
  ): TypedContractMethod<
    [_recipientIds: AddressLike[], _recipientStatuses: BigNumberish[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "reviewThreshold"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "reviewedByManager"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish, arg2: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "reviewsByStatus"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish, arg2: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "totalRecipientVotes"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "updatePoolTimestamps"
  ): TypedContractMethod<
    [
      _registrationStartTime: BigNumberish,
      _registrationEndTime: BigNumberish,
      _allocationStartTime: BigNumberish,
      _allocationEndTime: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "withdraw"
  ): TypedContractMethod<[_token: AddressLike], [void], "nonpayable">;

  getEvent(
    key: "Allocated"
  ): TypedContractEvent<
    AllocatedEvent.InputTuple,
    AllocatedEvent.OutputTuple,
    AllocatedEvent.OutputObject
  >;
  getEvent(
    key: "AllocatorAdded"
  ): TypedContractEvent<
    AllocatorAddedEvent.InputTuple,
    AllocatorAddedEvent.OutputTuple,
    AllocatorAddedEvent.OutputObject
  >;
  getEvent(
    key: "AllocatorRemoved"
  ): TypedContractEvent<
    AllocatorRemovedEvent.InputTuple,
    AllocatorRemovedEvent.OutputTuple,
    AllocatorRemovedEvent.OutputObject
  >;
  getEvent(
    key: "Distributed"
  ): TypedContractEvent<
    DistributedEvent.InputTuple,
    DistributedEvent.OutputTuple,
    DistributedEvent.OutputObject
  >;
  getEvent(
    key: "Initialized"
  ): TypedContractEvent<
    InitializedEvent.InputTuple,
    InitializedEvent.OutputTuple,
    InitializedEvent.OutputObject
  >;
  getEvent(
    key: "PoolActive"
  ): TypedContractEvent<
    PoolActiveEvent.InputTuple,
    PoolActiveEvent.OutputTuple,
    PoolActiveEvent.OutputObject
  >;
  getEvent(
    key: "RecipientStatusUpdated"
  ): TypedContractEvent<
    RecipientStatusUpdatedEvent.InputTuple,
    RecipientStatusUpdatedEvent.OutputTuple,
    RecipientStatusUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "Registered"
  ): TypedContractEvent<
    RegisteredEvent.InputTuple,
    RegisteredEvent.OutputTuple,
    RegisteredEvent.OutputObject
  >;
  getEvent(
    key: "Reviewed"
  ): TypedContractEvent<
    ReviewedEvent.InputTuple,
    ReviewedEvent.OutputTuple,
    ReviewedEvent.OutputObject
  >;
  getEvent(
    key: "TimestampsUpdated"
  ): TypedContractEvent<
    TimestampsUpdatedEvent.InputTuple,
    TimestampsUpdatedEvent.OutputTuple,
    TimestampsUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "UpdatedRegistration"
  ): TypedContractEvent<
    UpdatedRegistrationEvent.InputTuple,
    UpdatedRegistrationEvent.OutputTuple,
    UpdatedRegistrationEvent.OutputObject
  >;

  filters: {
    "Allocated(address,uint256,address)": TypedContractEvent<
      AllocatedEvent.InputTuple,
      AllocatedEvent.OutputTuple,
      AllocatedEvent.OutputObject
    >;
    Allocated: TypedContractEvent<
      AllocatedEvent.InputTuple,
      AllocatedEvent.OutputTuple,
      AllocatedEvent.OutputObject
    >;

    "AllocatorAdded(address,address)": TypedContractEvent<
      AllocatorAddedEvent.InputTuple,
      AllocatorAddedEvent.OutputTuple,
      AllocatorAddedEvent.OutputObject
    >;
    AllocatorAdded: TypedContractEvent<
      AllocatorAddedEvent.InputTuple,
      AllocatorAddedEvent.OutputTuple,
      AllocatorAddedEvent.OutputObject
    >;

    "AllocatorRemoved(address,address)": TypedContractEvent<
      AllocatorRemovedEvent.InputTuple,
      AllocatorRemovedEvent.OutputTuple,
      AllocatorRemovedEvent.OutputObject
    >;
    AllocatorRemoved: TypedContractEvent<
      AllocatorRemovedEvent.InputTuple,
      AllocatorRemovedEvent.OutputTuple,
      AllocatorRemovedEvent.OutputObject
    >;

    "Distributed(address,address,uint256,address)": TypedContractEvent<
      DistributedEvent.InputTuple,
      DistributedEvent.OutputTuple,
      DistributedEvent.OutputObject
    >;
    Distributed: TypedContractEvent<
      DistributedEvent.InputTuple,
      DistributedEvent.OutputTuple,
      DistributedEvent.OutputObject
    >;

    "Initialized(uint256,bytes)": TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;
    Initialized: TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;

    "PoolActive(bool)": TypedContractEvent<
      PoolActiveEvent.InputTuple,
      PoolActiveEvent.OutputTuple,
      PoolActiveEvent.OutputObject
    >;
    PoolActive: TypedContractEvent<
      PoolActiveEvent.InputTuple,
      PoolActiveEvent.OutputTuple,
      PoolActiveEvent.OutputObject
    >;

    "RecipientStatusUpdated(address,uint256,uint8,address)": TypedContractEvent<
      RecipientStatusUpdatedEvent.InputTuple,
      RecipientStatusUpdatedEvent.OutputTuple,
      RecipientStatusUpdatedEvent.OutputObject
    >;
    RecipientStatusUpdated: TypedContractEvent<
      RecipientStatusUpdatedEvent.InputTuple,
      RecipientStatusUpdatedEvent.OutputTuple,
      RecipientStatusUpdatedEvent.OutputObject
    >;

    "Registered(address,bytes,address)": TypedContractEvent<
      RegisteredEvent.InputTuple,
      RegisteredEvent.OutputTuple,
      RegisteredEvent.OutputObject
    >;
    Registered: TypedContractEvent<
      RegisteredEvent.InputTuple,
      RegisteredEvent.OutputTuple,
      RegisteredEvent.OutputObject
    >;

    "Reviewed(address,uint256,uint8,address)": TypedContractEvent<
      ReviewedEvent.InputTuple,
      ReviewedEvent.OutputTuple,
      ReviewedEvent.OutputObject
    >;
    Reviewed: TypedContractEvent<
      ReviewedEvent.InputTuple,
      ReviewedEvent.OutputTuple,
      ReviewedEvent.OutputObject
    >;

    "TimestampsUpdated(uint64,uint64,uint64,uint64,address)": TypedContractEvent<
      TimestampsUpdatedEvent.InputTuple,
      TimestampsUpdatedEvent.OutputTuple,
      TimestampsUpdatedEvent.OutputObject
    >;
    TimestampsUpdated: TypedContractEvent<
      TimestampsUpdatedEvent.InputTuple,
      TimestampsUpdatedEvent.OutputTuple,
      TimestampsUpdatedEvent.OutputObject
    >;

    "UpdatedRegistration(address,uint256,bytes,address,uint8)": TypedContractEvent<
      UpdatedRegistrationEvent.InputTuple,
      UpdatedRegistrationEvent.OutputTuple,
      UpdatedRegistrationEvent.OutputObject
    >;
    UpdatedRegistration: TypedContractEvent<
      UpdatedRegistrationEvent.InputTuple,
      UpdatedRegistrationEvent.OutputTuple,
      UpdatedRegistrationEvent.OutputObject
    >;
  };
}
